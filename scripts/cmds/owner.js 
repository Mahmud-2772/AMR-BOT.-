const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");
const moment = require("moment");

module.exports = {
  config: {
    name: "owner",
    aliases: ["info"],
    version: "1.0",
    author: "Sa!F ü™∂",
    shortDescription: "Show owner and bot info",
    longDescription: "Display owner details with random video",
    category: "info",
    guide: { en: "{pn}" }
  },

  onStart: async function ({ api, event }) {
    const ownerInfo = {
      name: "ùêíùêö!ùêÖ ùêàùê¨ùê•ùêöùê¶",
      age: "ùüèùüê",
      birthday: "ùüêùüéùüèùüë - ùüéùüì - ùüéùüè",
      height: "ùêíùêûùêúùê´ùêûùê≠",
      location: "ùêëùêöùê£ùê¨ùê°ùêöùê°ùê¢",
      class: "ùüî",
      hobby: "ùêèùê®ùê®ùê´ ùê§ùê¢ùêù",
      relationship: "ùêíùê¢ùêßùê†ùê•ùêû",
      dream: "ùêàùêùùê§",
      favAnime: "ùêãùê®ùê≠ùê¶",
      gender: "ùêåùêöùê•ùêû",
      facebook: "https://m.me/original.saiff",
      botname: "ùêå√™ùê•ùê¢ùê¨ùê¨ùêö",
      botVersion: "1.0"
    };

    // ‚úÖ Uptime calculation
    const uptime = process.uptime();
    const duration = moment.duration(uptime, "seconds");
    const uptimeText = `${duration.hours()}h ${duration.minutes()}m ${duration.seconds()}s`;

    // ‚úÖ Media list
    const mediaLinks = [
      "https://i.imgur.com/qoHWIOD.mp4",
      "https://i.imgur.com/uTdA4LU.mp4",
      "https://i.imgur.com/2fRehnn.mp4",
      "https://i.imgur.com/mSphvOL.mp4",
      "https://i.imgur.com/P4W63mi.mp4",
      "https://i.imgur.com/v6BFWAj.mp4",
      "https://i.imgur.com/s6bV3eI.mp4"
    ];
    const randomLink = mediaLinks[Math.floor(Math.random() * mediaLinks.length)];

    // ‚úÖ Always use temp path (GitHub compatibility)
    const cachePath = path.join(process.cwd(), "cache");
    if (!fs.existsSync(cachePath)) fs.mkdirSync(cachePath, { recursive: true });
    const videoPath = path.join(cachePath, `owner_${Date.now()}.mp4`);

    try {
      // ‚úÖ Download video
      const response = await axios.get(randomLink, { responseType: "stream" });
      const writer = fs.createWriteStream(videoPath);
      response.data.pipe(writer);

      await new Promise((resolve, reject) => {
        writer.on("finish", resolve);
        writer.on("error", reject);
      });

      // ‚úÖ Info text
      const infoText = `
ùêéùêñùêçùêÑùêë ùêàùêçùêÖùêé ‚ú®
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
- Name: ${ownerInfo.name}
- Age: ${ownerInfo.age}
- Birthday: ${ownerInfo.birthday}
- Height: ${ownerInfo.height}
- Location: ${ownerInfo.location}
- Class: ${ownerInfo.class}
- Gender: ${ownerInfo.gender}
- Bio: ${ownerInfo.hobby}
- Relationship: ${ownerInfo.relationship}
- Dream: ${ownerInfo.dream}
- Fav Anime: ${ownerInfo.favAnime}
- Facebook: ${ownerInfo.facebook}

ùêÅùêéùêì ùêàùêçùêÖùêé 
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
- Bot Name: ${ownerInfo.botname}
- Bot Version: ${ownerInfo.botVersion}
- Uptime: ${uptimeText}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

      api.sendMessage(
        {
          body: infoText,
          attachment: fs.createReadStream(videoPath)
        },
        event.threadID,
        () => {
          // ‚úÖ Delete after sending
          fs.unlink(videoPath).catch(() => {});
        }
      );
    } catch (err) {
      console.error("‚ùå Error in owner.js:", err);
      api.sendMessage("‚ùå | ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID);
    }
  }
};