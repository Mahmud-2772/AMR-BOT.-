const fs = require("fs-extra");

module.exports = {
  config: {
    name: "balance",
    aliases: ["bal"],
    version: "1.3",
    author: "Saif",
    countDown: 5,
    role: 0,
    description: {
      vi: "xem s·ªë ti·ªÅn hi·ªán c√≥ ho·∫∑c chuy·ªÉn ti·ªÅn",
      en: "view your money or transfer to others"
    },
    category: "economy",
    guide: {
      en:
        "{pn} ‚Üí view your money\n" +
        "{pn} @mention ‚Üí view mentioned user money\n" +
        "{pn} transfer <amount> @mention ‚Üí transfer money\n" +
        "{pn} transfer <amount> (reply) ‚Üí transfer money to replied user"
    }
  },

  langs: {
    en: {
      money: "You have %1$",
      moneyOf: "%1 has %2$",
      notEnough: "‚ùå | You don't have enough balance.",
      transferSuccess: "‚ú® | Transferred %1$ to %2",
      invalidAmount: "Invalid amount.",
      noTarget: "‚ùå | Please mention or reply to a user to transfer."
    }
  },

  onStart: async function ({ message, usersData, event, args, getLang }) {
    const formatBoldSerif = (text) => {
      const boldSerifMap = {
        a: "ùêö", b: "ùêõ", c: "ùêú", d: "ùêù", e: "ùêû", f: "ùêü", g: "ùê†", h: "ùê°", i: "ùê¢", j: "ùê£",
        k: "ùê§", l: "ùê•", m: "ùê¶", n: "ùêß", o: "ùê®", p: "ùê©", q: "ùê™", r: "ùê´", s: "ùê¨", t: "ùê≠",
        u: "ùêÆ", v: "ùêØ", w: "ùê∞", x: "ùê±", y: "ùê≤", z: "ùê≥",
        A: "ùêÄ", B: "ùêÅ", C: "ùêÇ", D: "ùêÉ", E: "ùêÑ", F: "ùêÖ", G: "ùêÜ", H: "ùêá", I: "ùêà", J: "ùêâ",
        K: "ùêä", L: "ùêã", M: "ùêå", N: "ùêç", O: "ùêé", P: "ùêè", Q: "ùêê", R: "ùêë", S: "ùêí", T: "ùêì",
        U: "ùêî", V: "ùêï", W: "ùêñ", X: "ùêó", Y: "ùêò", Z: "ùêô",
        "0": "ùüé", "1": "ùüè", "2": "ùüê", "3": "ùüë", "4": "ùüí", "5": "ùüì", "6": "ùüî", "7": "ùüï", "8": "ùüñ", "9": "ùüó",
        "$": "$", ".": ".", ",": ",", ":": ":", "-": "-", " ": " "
      };
      return text.split('').map(char => boldSerifMap[char] || char).join('');
    };

    const senderID = event.senderID;

    // ‚îÄ‚îÄ‚îÄ BALANCE TRANSFER FEATURE ‚îÄ‚îÄ‚îÄ
    if (args[0] && args[0].toLowerCase() === "transfer") {
      const amount = parseInt(args[1]);
      if (isNaN(amount) || amount <= 0) {
        return message.reply(getLang("invalidAmount"));
      }

      let targetID;

      // If mention
      if (Object.keys(event.mentions).length > 0) {
        targetID = Object.keys(event.mentions)[0];
      }
      // If reply
      else if (event.messageReply) {
        targetID = event.messageReply.senderID;
      }

      if (!targetID) return message.reply(getLang("noTarget"));

      const senderData = await usersData.get(senderID);
      if (senderData.money < amount) {
        return message.reply(getLang("notEnough"));
      }

      // Update balances
      await usersData.set(senderID, { money: senderData.money - amount }, true);
      const targetData = await usersData.get(targetID);
      await usersData.set(targetID, { money: (targetData.money || 0) + amount }, true);

      const targetName = event.mentions[targetID]
        ? event.mentions[targetID].replace("@", "")
        : (await usersData.getName(targetID));

      return message.reply(formatBoldSerif(getLang("transferSuccess", amount, targetName)));
    }

    // ‚îÄ‚îÄ‚îÄ SHOW BALANCE ‚îÄ‚îÄ‚îÄ
    if (Object.keys(event.mentions).length > 0) {
      const uids = Object.keys(event.mentions);
      let msg = "";
      for (const uid of uids) {
        const userMoney = await usersData.get(uid, "money");
        const name = event.mentions[uid].replace("@", "");
        msg += formatBoldSerif(getLang("moneyOf", name, userMoney)) + "\n";
      }
      return message.reply(msg.trim());
    }

    // If reply without transfer ‚Üí show balance of replied user
    if (event.messageReply && event.messageReply.senderID) {
      const uid = event.messageReply.senderID;
      const userMoney = await usersData.get(uid, "money");
      const name = await usersData.getName(uid);
      return message.reply(formatBoldSerif(getLang("moneyOf", name, userMoney)));
    }

    // Show own balance
    const userData = await usersData.get(senderID);
    return message.reply(formatBoldSerif(getLang("money", userData.money)));
  }
};